
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>University Assistant</title>
    <style>
        /* Reset and base styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(to bottom, white, #f9fafb);
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2.5rem 1rem;
        }

        .animate-fade-in {
            animation: fadeIn 0.5s ease-in-out;
        }

        @@keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        /* Header Styles */
        .header {
            text-align: center;
            margin-bottom: 2.5rem;
        }

        .header h1 {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        #welcome-message {
            font-size: 1.25rem;
            color: #4b5563;
        }

        /* Button Group */
        .btn-group {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        @@media (min-width: 640px) {
            .btn-group {
                flex-direction: row;
                justify-content: center;
            }
        }

        .btn {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 0.75rem 1rem;
            border-radius: 0.5rem;
            font-size: 1rem;
            font-weight: 500;
            transition: all 0.2s;
            cursor: pointer;
            border: none;
        }

        .btn-primary {
            background-color: #9333ea;
            color: white;
        }

        .btn-primary:hover {
            background-color: #7e22ce;
        }

        .btn-secondary {
            background-color: white;
            color: #1f2937;
            border: 1px solid #d1d5db;
        }

        .btn-secondary:hover {
            background-color: #f3f4f6;
        }

        /* Features */
        .features {
            display: grid;
            grid-template-columns: 1fr;
            gap: 1.5rem;
            margin-top: 3rem;
        }

        @@media (min-width: 768px) {
            .features {
                grid-template-columns: repeat(3, 1fr);
            }
        }

        .feature-card {
            background-color: white;
            padding: 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            border: 1px solid #f3f4f6;
        }

        .feature-header {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 1rem;
        }

        .feature-header svg {
            color: #9333ea;
        }

        .feature-header h3 {
            font-size: 1.125rem;
            font-weight: 600;
        }

        .feature-card p {
            color: #4b5563;
        }

        /* Chat Button and Container */
        .chat-button-container {
            position: fixed;
            bottom: 1.5rem;
            right: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            z-index: 5000;
            transition: all 0.3s;
        }

        .chat-label {
            background-color: white;
            padding: 0.5rem 1rem;
            border-radius: 9999px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            font-weight: 500;
            color: #4b5563;
            border: 1px solid #e5e7eb;
        }

        .chat-button {
            background-color: #9333ea;
            color: white;
            width: 3.5rem;
            height: 3.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 9999px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            border: none;
            cursor: pointer;
            transition: all 0.2s;
        }

        .chat-button:hover {
            background-color: #7e22ce;
        }

        /* Chat Window */
        .chat-window {
            position: fixed;
            bottom: 1.5rem;
            right: 1.5rem;
            width: 360px;
            max-width: 95vw;
            background-color: white;
            border-radius: 1rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            display: flex;
            flex-direction: column;
            z-index: 50;
            overflow: hidden;
            max-height: 600px;
            height: 80vh;
        }

        .chat-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            background-color: #9333ea;
            color: white;
            padding: 0.75rem 1rem;
        }

        .chat-header-title {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 500;
        }

        .chat-close-btn {
            color: white;
            background: none;
            border: none;
            cursor: pointer;
        }

        .chat-close-btn:hover {
            color: #e5e7eb;
        }

        .online-indicator {
            width: 0.5rem;
            height: 0.5rem;
            background-color: #34d399;
            border-radius: 9999px;
        }

        /* Login View */
        .login-container {
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
        }

        .login-title {
            font-size: 1.25rem;
            font-weight: bold;
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .login-form {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .form-label {
            font-size: 0.875rem;
            font-weight: 500;
            color: #4b5563;
        }

        .form-input {
            padding: 0.5rem 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
            outline: none;
            transition: all 0.2s;
        }

        .form-input:focus {
            border-color: #9333ea;
            box-shadow: 0 0 0 2px rgba(147, 51, 234, 0.2);
        }

        .login-button {
            width: 100%;
            background-color: #9333ea;
            color: white;
            padding: 0.5rem;
            border-radius: 0.375rem;
            font-weight: 500;
            border: none;
            cursor: pointer;
            margin-top: 0.5rem;
            transition: all 0.2s;
        }

        .login-button:hover {
            background-color: #7e22ce;
        }

        .error-message {
            color: #ef4444;
            font-size: 0.875rem;
            margin-top: 0.5rem;
            text-align: center;
        }

        /* Chat View */
        .user-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem 1rem;
            background-color: #f3f4f6;
            border-bottom: 1px solid #e5e7eb;
        }

        .user-info {
            display: flex;
            flex-direction: column;
        }

        .user-info-label {
            font-size: 0.75rem;
            color: #6b7280;
        }

        .user-info-name {
            font-size: 0.875rem;
            font-weight: 500;
        }

        .logout-button {
            font-size: 0.875rem;
            color: #4b5563;
            background: none;
            border: none;
            cursor: pointer;
        }

        .logout-button:hover {
            color: #1f2937;
        }

        .chat-nav {
            display: flex;
            border-bottom: 1px solid #e5e7eb;
            background-color: #f9fafb;
        }

        .chat-nav-item {
            display: flex;
            align-items: center;
            padding: 0.5rem 0.75rem;
            font-size: 0.875rem;
            color: #6b7280;
            cursor: pointer;
            border-bottom: 2px solid transparent;
        }

        .chat-nav-item:hover {
            background-color: #f3f4f6;
        }

        .chat-nav-item.active {
            color: #9333ea;
            border-bottom-color: #9333ea;
            font-weight: 500;
        }

        .chat-nav-item svg {
            margin-right: 0.25rem;
        }

        .quick-actions {
            padding: 0.5rem;
            border-bottom: 1px solid #e5e7eb;
        }

        .quick-actions-title {
            font-size: 0.75rem;
            color: #6b7280;
            margin-bottom: 0.5rem;
            padding: 0 0.25rem;
        }

        .quick-actions-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
        }

        .quick-action-button {
            background-color: white;
            border: 1px solid #e5e7eb;
            border-radius: 0.25rem;
            padding: 0.5rem 0.75rem;
            font-size: 0.875rem;
            text-align: left;
            color: #4b5563;
            cursor: pointer;
        }

        .quick-action-button:hover {
            background-color: #f9fafb;
        }

        .chat-messages {
            flex: 1;
            padding: 0.5rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
            overflow-y: auto;
            max-height: calc(80vh - 300px);
        }

        .chat-message {
            display: flex;
            flex-direction: column;
            max-width: 85%;
            border-radius: 0.5rem;
            padding: 0.5rem;
            position: relative;
        }

        .chat-message.assistant {
            background-color: #f3f4f6;
            color: #1f2937;
            align-self: flex-start;
            border-top-right-radius: 0.5rem;
            border-bottom-right-radius: 0.5rem;
            border-bottom-left-radius: 0.5rem;
        }

        .chat-message.user {
            background-color: #9333ea;
            color: white;
            align-self: flex-end;
            border-top-left-radius: 0.5rem;
            border-bottom-left-radius: 0.5rem;
            border-bottom-right-radius: 0.5rem;
        }

        .chat-message-text {
            white-space: pre-line;
        }

        .chat-message-time {
            font-size: 0.625rem;
            opacity: 0.7;
            align-self: flex-end;
            margin-top: 0.25rem;
        }

      

        .chat-input-box {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            background-color: #f3f4f6;
            border-radius: 9999px;
            padding: 0.5rem 1rem;
        }

        .chat-input {
            background-color: transparent;
            border: none;
            flex: 1;
            outline: none;
            color: #1f2937;
            font-size: 0.875rem;
        }

        .chat-send-button {
            color: #9333ea;
            background: none;
            border: none;
            cursor: pointer;
        }

        .chat-send-button:hover {
            color: #7e22ce;
        }

        /* Verification Modal */
        .verification-modal {
            position: fixed;
            inset: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 50;
            padding: 1rem;
        }

        .verification-container {
            background-color: white;
            border-radius: 0.75rem;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            width: 100%;
            max-width: 28rem;
            overflow: hidden;
        }

        .verification-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #e5e7eb;
        }

        .verification-title {
            font-size: 1.125rem;
            font-weight: bold;
        }

        .verification-close {
            color: #6b7280;
            background: none;
            border: none;
            cursor: pointer;
        }

        .verification-close:hover {
            color: #1f2937;
        }

        .verification-body {
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .otp-container {
            display: flex;
            justify-content: center;
            gap: 0.5rem;
            margin: 1.5rem 0;
        }

        .otp-input {
            width: 2.5rem;
            height: 3rem;
            text-align: center;
            font-size: 1.25rem;
            font-weight: bold;
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
            outline: none;
            transition: all 0.2s;
        }

        .otp-input:focus {
            border-color: #9333ea;
            box-shadow: 0 0 0 2px rgba(147, 51, 234, 0.2);
        }

        .verification-button {
            width: 100%;
            background-color: #9333ea;
            color: white;
            padding: 0.75rem;
            border-radius: 0.5rem;
            font-weight: 500;
            border: none;
            cursor: pointer;
            transition: all 0.2s;
        }

        .verification-button:hover {
            background-color: #7e22ce;
        }

        .verification-feedback {
            text-align: center;
            padding: 0.5rem;
            border-radius: 0.25rem;
        }

        .success-message {
            color: #059669;
        }

        .error-message {
            color: #dc2626;
        }

        .resend-code {
            text-align: center;
            font-size: 0.875rem;
            color: #6b7280;
        }

        .resend-link {
            color: #9333ea;
            cursor: pointer;
        }

        .resend-link:hover {
            color: #7e22ce;
        }

        .text-center {
            text-align: center;
        }

        .hidden {
            display: none !important;
        }


        .chat-input-container {
            padding: 0.2rem !important;
            position: fixed !important;
            top: 578px !important;
            width: 32%;
            border-top: 1px solid #e5e7eb;
        }

        /* Adjust for extra-large screens */
        @@media screen and (min-width: 1200px) {
            .chat-input-container

        {
            width: 25%;
        }

        }

        /* Medium and large screens */
        @@media screen and (max-width: 1199px) {
            .chat-input-container

        {
            width: 36%;
        }

        }

        /* Tablets and small screens */
        @@media screen and (max-width: 768px) {
            .chat-input-container

        {
            width: 50%;
        }

        }

        /* Mobile devices */
        @@media screen and (max-width: 480px) {
            .chat-input-container

        {
            width: 90%;
            top: auto; /* Optional: adjust positioning for mobile-friendly alignment */
        }

        }
    </style>
</head>
<body>

    @RenderBody();
    <!-- Main Container -->
    <div class="container animate-fade-in">
        <div class="header" style="display:none;">
            <h1>University Management Assistant</h1>
            <p id="welcome-message">Your personal guide to academic information, admission details, campus resources, and more.</p>
        </div>

        <div class="btn-group" style="display:none;">
            <button id="open-assistant-btn" class="btn btn-primary">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M22 10v6M2 10l10-5 10 5-10 5z" />
                    <path d="M6 12v5c0 2 2 3 6 3s6-1 6-3v-5" />
                </svg>
                Open University Assistant
            </button>

            <button id="verification-btn" class="btn btn-secondary">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M20 13c0 5-4.5 8-8 8s-8-3-8-8V7a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2Z" />
                    <path d="m9 12 2 2 4-4" />
                </svg>
                Verify Account
            </button>
        </div>

        <div class="features" style="display:none;">
            <div class="feature-card">
                <div class="feature-header">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z" />
                        <path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z" />
                    </svg>
                    <h3>Academic Resources</h3>
                </div>
                <p>Access class schedules, view grades, course registration, and exam information with ease.</p>
            </div>

            <div class="feature-card" style="display:none;">
                <div class="feature-header">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="m4 6 8-4 8 4" />
                        <path d="m18 10 4 2v8a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-8l4-2" />
                        <path d="M14 22v-4a2 2 0 0 0-4 0v4" />
                        <path d="M18 5v17" />
                        <path d="M6 5v17" />
                        <circle cx="12" cy="9" r="2" />
                    </svg>
                    <h3>Admissions Support</h3>
                </div>
                <p>Get information about applications, requirements, financial aid, and important deadlines.</p>
            </div>

            <div class="feature-card" style="display:none;">
                <div class="feature-header">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" />
                        <circle cx="9" cy="7" r="4" />
                        <path d="M22 21v-2a4 4 0 0 0-3-3.87" />
                        <path d="M16 3.13a4 4 0 0 1 0 7.75" />
                    </svg>
                    <h3>Campus Life</h3>
                </div>
                <p>Discover campus facilities, upcoming events, student housing options, and more.</p>
            </div>
        </div>
    </div>

    <!-- Floating Chat Button -->
    <div id="chat-button-container" class="chat-button-container">
        <div class="chat-label">University Assistant</div>
        <button id="chat-button" class="chat-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z" />
            </svg>
        </button>
    </div>

    <!-- Chat Window -->
    <div id="chat-window" class="chat-window hidden">
        <div class="chat-header">
            <div class="chat-header-title">
                <div class="online-indicator"></div>
                University Assistant
            </div>
            <button id="close-chat" class="chat-close-btn">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M18 6 6 18" />
                    <path d="m6 6 12 12" />
                </svg>
            </button>
        </div>

        <!-- Login View -->
        <div id="login-view">
            <div class="login-container">
                <h2 class="login-title">Login to Chat</h2>
                <div id="login-error" class="error-message hidden"></div>
                <form id="login-form" class="login-form">
                    <div class="form-group">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" id="email" class="form-input" placeholder="your@email.com" required>
                    </div>
                    <div class="form-group">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" id="password" class="form-input" placeholder="••••••••" required>
                    </div>
                    <button type="submit" class="login-button">Login</button>
                </form>
            </div>
        </div>

        <!-- Chat View (initially hidden) -->
        <div id="chat-view" class="hidden">
            <!-- User info bar with logout button -->
            <div class="user-bar">
                <div class="user-info">
                    <span class="user-info-label">Logged in as</span>
                    <span id="user-name" class="user-info-name"></span>
                </div>
                <button id="logout-button" class="logout-button">Sign out</button>
            </div>

            <div class="chat-nav">
                <div class="chat-nav-item active" data-tab="all">All</div>
                <div class="chat-nav-item" data-tab="academics">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"></path>
                        <path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"></path>
                    </svg>
                    Academics
                </div>
                <div class="chat-nav-item" data-tab="admissions">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M22 10v6M2 10l10-5 10 5-10 5z"></path>
                        <path d="M6 12v5c3 3 9 3 12 0v-5"></path>
                    </svg>
                    Admissions
                </div>
                <div class="chat-nav-item" data-tab="campus">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                        <circle cx="9" cy="7" r="4"></circle>
                        <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                        <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                    </svg>
                    Campus
                </div>
            </div>

            <div id="quick-actions" class="quick-actions">
                <div class="quick-actions-title">QUICK ACTIONS</div>
                <div class="quick-actions-grid" id="quick-actions-grid">
                    <!-- Quick action buttons will be loaded here -->
                </div>
            </div>

            <div id="chat-messages" class="chat-messages">
                <!-- Welcome message will be added here after login -->
            </div>

            <div class="chat-input-container">
                <div class="chat-input-box">
                    <input id="chat-input" class="chat-input" type="text" placeholder="Type your message...">
                    <button id="send-message" class="chat-send-button">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="m22 2-7 20-4-9-9-4Z" />
                            <path d="M22 2 11 13" />
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Verification Modal -->
    <div id="verification-modal" class="verification-modal hidden">
        <div class="verification-container">
            <div class="verification-header">
                <h3 class="verification-title">Verify Your Account</h3>
                <button id="close-verification" class="verification-close">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M18 6 6 18" />
                        <path d="m6 6 12 12" />
                    </svg>
                </button>
            </div>
            <div class="verification-body">
                <p class="text-center">Enter the 6-digit code sent to your email address</p>

                <div class="otp-container">
                    <input type="text" maxlength="1" class="otp-input" data-index="0">
                    <input type="text" maxlength="1" class="otp-input" data-index="1">
                    <input type="text" maxlength="1" class="otp-input" data-index="2">
                    <input type="text" maxlength="1" class="otp-input" data-index="3">
                    <input type="text" maxlength="1" class="otp-input" data-index="4">
                    <input type="text" maxlength="1" class="otp-input" data-index="5">
                </div>

                <div id="verification-message" class="verification-feedback hidden"></div>

                <button id="verify-button" class="verification-button">Verify</button>

                <p class="resend-code">
                    Didn't receive a code? <span id="resend-code" class="resend-link">Resend</span>
                </p>
            </div>
        </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
                 var botResponses = {};
  $(document).ready(function () {
            // Fetch data via AJAX
                   

console.log("ready reached");
            $.ajax({
                        url: '@Url.Action("Responses", "ChatBot")',

                method: 'POST',
                success: function (data) {
                    botResponses = data;
                    console.log("Bot responses loaded:", botResponses);
                },
                error: function () {
                    alert('Failed to load bot responses.');
                }
            });
        });
        </script>
    <script>

              // let botResponses = {};

      



        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements - Main UI
            const chatButtonContainer = document.getElementById('chat-button-container');
            const chatButton = document.getElementById('chat-button');
            const chatWindow = document.getElementById('chat-window');
            const closeChat = document.getElementById('close-chat');
            const loginView = document.getElementById('login-view');
            const chatView = document.getElementById('chat-view');
            const loginForm = document.getElementById('login-form');
            const loginError = document.getElementById('login-error');
            const emailInput = document.getElementById('email');
            const passwordInput = document.getElementById('password');
            const userName = document.getElementById('user-name');
            const logoutButton = document.getElementById('logout-button');
            const chatInput = document.getElementById('chat-input');
            const sendMessage = document.getElementById('send-message');
            const chatMessages = document.getElementById('chat-messages');
            const navItems = document.querySelectorAll('.chat-nav-item');
            const quickActionsGrid = document.getElementById('quick-actions-grid');
            const openAssistantBtn = document.getElementById('open-assistant-btn');
            const welcomeMessage = document.getElementById('welcome-message');

            // DOM Elements - Verification
            const verificationBtn = document.getElementById('verification-btn');
            const verificationModal = document.getElementById('verification-modal');
            const closeVerification = document.getElementById('close-verification');
            const verifyButton = document.getElementById('verify-button');
            const otpInputs = document.querySelectorAll('.otp-input');
            const resendCodeBtn = document.getElementById('resend-code');
            const verificationMessage = document.getElementById('verification-message');

            // Current tab and user state
            let currentTab = 'all';
            let isAuthenticated = false;
            let currentUser = null;
            let isVerified = false;

            // Check if user is already logged in (from localStorage)
            function checkAuth() {
                const savedUser = localStorage.getItem('university_assistant_user');
                if (savedUser) {
                    currentUser = JSON.parse(savedUser);
                    isAuthenticated = true;

                    // Check if verified
                    isVerified = localStorage.getItem('university_assistant_verified') === 'true';

                    // Update UI
                    updateWelcomeMessage();
                }
            }

            // Update welcome message based on authentication state
            function updateWelcomeMessage() {
                if (isAuthenticated && currentUser) {
                    let message = `Your personal guide to academic information, admission details, campus resources, and more. Welcome back, ${currentUser.name}!`;
                    if (isVerified) {
                        message += ' (Verified)';
                    }
                    welcomeMessage.textContent = message;
                } else {
                    welcomeMessage.textContent = 'Your personal guide to academic information, admission details, campus resources, and more.';
                }
            }

            // Toggle chat window
            function toggleChatWindow() {
                chatButtonContainer.classList.toggle('hidden');
                chatWindow.classList.toggle('hidden');

                if (!chatWindow.classList.contains('hidden')) {
                    if (isAuthenticated) {
                        showChatView();
                    } else {
                        showLoginView();
                    }
                }
            }

            // Show login view
            function showLoginView() {
                loginView.classList.remove('hidden');
                chatView.classList.add('hidden');
                emailInput.focus();
            }

            // Show chat view
            function showChatView() {
                loginView.classList.add('hidden');
                chatView.classList.remove('hidden');
                loadQuickActions(currentTab);

                // Update user name in UI
                userName.textContent = currentUser.name;
                if (isVerified) {
                    userName.textContent += ' (Verified)';
                }

                // Add welcome message if there are no messages
                if (chatMessages.children.length === 0) {
                    addMessage(`Hello ${currentUser.name}! I'm your university management assistant. How can I help you today?`, false);
                }

                // Focus the chat input and scroll messages to bottom
                chatInput.focus();
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            // Format time for messages
            function formatTime(date) {
                return `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;
            }

            // Handle login submission
            function handleLogin(e) {
                e.preventDefault();

                const email = emailInput.value.trim();
                const password = passwordInput.value.trim();

                if (!email || !password) {
                    showError("Please enter both email and password");
                    return;
                }

                // Simulate login (in a real app, this would call an API)
                if (email.includes('@@') && password.length >= 4) {
                    const user = {
                        email: email,
                        name: email.split('@@')[0] // Use part before @@ as name
                    };

                    currentUser = user;
                    isAuthenticated = true;

                    // Save to localStorage
                    localStorage.setItem('university_assistant_user', JSON.stringify(user));

                    // Update UI
                    updateWelcomeMessage();
                    loginForm.reset();
                    loginError.classList.add('hidden');

                    // Show chat view
                    showChatView();
                } else {
                    showError("Invalid email or password");
                }
            }

            // Show login error
            function showError(message) {
                loginError.textContent = message;
                loginError.classList.remove('hidden');

                // Hide after 3 seconds
                setTimeout(() => {
                    loginError.classList.add('hidden');
                }, 3000);
            }

            // Handle logout
            function handleLogout() {
                localStorage.removeItem('university_assistant_user');
                isAuthenticated = false;
                currentUser = null;

                // Clear chat messages
                chatMessages.innerHTML = '';

                // Update welcome message
                updateWelcomeMessage();

                // Show login view
                showLoginView();
            }

            // Add a message to the chat
            function addMessage(content, isUser) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `chat-message ${isUser ? 'user' : 'assistant'}`;

                const currentTime = formatTime(new Date());

                messageDiv.innerHTML = `
                    <div class="chat-message-text">${content}</div>
                    <div class="chat-message-time">${currentTime}</div>
                `;

                chatMessages.appendChild(messageDiv);

                // Ensure scroll is at the bottom
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            // Load quick actions for the current tab
            function loadQuickActions(tab) {
                // Clear current quick actions
                quickActionsGrid.innerHTML = '';

                // Define quick actions for each tab
                const quickActions = {
                    'all': [
                        { id: 'class-schedule', label: 'Class Schedule' },
                        { id: 'view-grades', label: 'View Grades' },
                        { id: 'course-registration', label: 'Course Registration' },
                        { id: 'exam-schedule', label: 'Exam Schedule' }
                    ],
                    'academics': [
                        { id: 'class-schedule', label: 'Class Schedule' },
                        { id: 'view-grades', label: 'View Grades' },
                        { id: 'course-registration', label: 'Course Registration' },
                        { id: 'exam-schedule', label: 'Exam Schedule' }
                    ],
                    'admissions': [
                        { id: 'application-status', label: 'Application Status' },
                        { id: 'admission-requirements', label: 'Admission Requirements' },
                        { id: 'financial-aid', label: 'Financial Aid' },
                        { id: 'application-deadlines', label: 'Application Deadlines' }
                    ],
                    'campus': [
                        { id: 'campus-map', label: 'Campus Map' },
                        { id: 'housing', label: 'Housing Options' },
                        { id: 'events', label: 'Upcoming Events' },
                        { id: 'facilities', label: 'Campus Facilities' }
                    ]
                };

                // Add buttons for the current tab
                if (quickActions[tab]) {
                    quickActions[tab].forEach(action => {
                        const button = document.createElement('button');
                        button.className = 'quick-action-button';
                        button.dataset.action = action.id;
                        button.textContent = action.label;
                        button.addEventListener('click', () => handleQuickAction(action.id));
                        quickActionsGrid.appendChild(button);
                    });
                }
            }

            // Generate a response based on quick actions or message content
            function generateResponse(message, actionId) {
                console.log("my meassage=>"+message)
                console.log("my meassage=>"+message +botResponses)
                if (actionId) {
                     const responses = {
                    //     'class-schedule'        : "Here is your current class schedule for Fall 2023: \n- Monday: CS101 (9:00 AM), MATH202 (1:00 PM)\n- Tuesday: ENG105 (11:00 AM)\n- Wednesday: CS101 (9:00 AM), PHYS101 (2:00 PM)\n- Thursday: ENG105 (11:00 AM)\n- Friday: MATH202 (1:00 PM), PHYS101 (2:00 PM)",
                    //     'view-grades'           : "Your current grades for Fall 2023:\n- CS101: A-\n- MATH202: B+\n- ENG105: A\n- PHYS101: B\n\nOverall GPA: 3.65",
                    //     'course-registration'   : "Course registration for Spring 2024 begins on November 15th. You have priority registration on November 12th due to your academic standing.",
                    //    'exam-schedule'         : "Your final exam schedule for Fall 2023:\n- CS101: December 12, 9:00 AM, Room H201\n- MATH202: December 14, 1:00 PM, Room S105\n- ENG105: December 15, 10:00 AM, Room A122\n- PHYS101: December 16, 2:00 PM, Room S202",
                    //     'application-status'    : "Your application status is: Admitted. Congratulations! Your acceptance package was sent on August 15, 2023.",
                    //     'admission-requirements': "Admission requirements include: High school transcript, SAT/ACT scores, 2 letters of recommendation, personal statement, and application fee of $75.",
                    //     'financial-aid'         : "You have been awarded the following financial aid for 2023-2024:\n- Academic Scholarship: $8,500\n- Federal Grant: $5,500\n- State Grant: $3,000\n- Student Loan (offered): $12,000",
                    //     'application-deadlines' : "Upcoming application deadlines:\n- Early Decision: November 1\n- Regular Decision: January 15\n- Transfer Students: March 1\n- Financial Aid Priority: February 15",
                    //     'campus-map'            : "Here is a link to the interactive campus map: [Campus Map Link]. You can also visit the information desk at the Student Center for a physical map.",
                    //     'housing': "On-campus housing options include traditional dormitories, suites, and apartments. Housing applications for next year open on February 1st.",
                    //     'events': "Upcoming campus events:\n- Fall Festival: October 15\n- Career Fair: October 20\n- Homecoming: November 5\n- Winter Concert: December 8",
                    //     'facilities': "Campus facilities include:\n- Main Library (open 24/7)\n- Student Center (open 7AM-11PM)\n- Recreation Center (open 6AM-10PM)\n- Health Center (open 8AM-5PM weekdays)"
                    // };

                    return botResponses[actionId] || "I don't have information about that action.";
                }

                // Text-based response
                if (!message) return "";

                const lowercaseMsg = message.toLowerCase();

                if (lowercaseMsg.includes('hello') || lowercaseMsg.includes('hi')) {
                    return `Hello ${currentUser?.name || ''}! How can I assist you with university matters today?`;
                }
                else if (lowercaseMsg.includes('course') || lowercaseMsg.includes('class')) {
                    return "Course registration for the next semester begins on August 15th. You can register through the student portal. Would you like to see your current class schedule?";
                }
                else if (lowercaseMsg.includes('admission') || lowercaseMsg.includes('apply')) {
                    return "For admission information, you'll need to submit an application form, transcripts, and recommendation letters. The deadline for Fall admission is March 1st. Do you need more details about the application process?";
                }
                else if (lowercaseMsg.includes('financial') || lowercaseMsg.includes('scholarship')) {
                    return "Various financial aid options are available including merit scholarships, need-based grants, and student loans. The FAFSA deadline is January 15th. Would you like to see your current financial aid package?";
                }
                else if (lowercaseMsg.includes('housing') || lowercaseMsg.includes('dorm')) {
                    return "On-campus housing options include traditional dormitories and apartment-style residences. Housing applications open on February 1st. Would you like to see the available housing options?";
                }
                else if (lowercaseMsg.includes('event') || lowercaseMsg.includes('activity')) {
                    return "Upcoming campus events include the Spring Festival on April 22nd and the Career Fair on May 5th. Check the student portal calendar for more events. Would you like me to remind you about any specific events?";
                }
                else if (lowercaseMsg.includes('grade')) {
                    return "Your current overall GPA is 3.65. Would you like to see a breakdown of your grades by course?";
                }
                else if (lowercaseMsg.includes('exam')) {
                    return "Final exams for this semester will be held from December 12-16. Would you like to see your specific exam schedule?";
                }
                else {
                    return "That's a great question about university life. For more specific information, you might want to check the university website or try one of the quick actions above to find what you're looking for.";
                }
            }

            // Handle quick action button clicks
            function handleQuickAction(actionId) {
                // Add user query message
                addMessage(`Show me ${actionId.replace(/-/g, ' ')}`, true);
                
                // Get response for this action
                const response = generateResponse(null, actionId);
                
                // Add assistant response after a short delay
                setTimeout(() => {
                    addMessage(response, false);
                }, 500);
            }

            // Send a user message
            function sendUserMessage() {
                const message = chatInput.value.trim();
                if (!message) return;

                // Add user's message
                addMessage(message, true);

                // Clear input
                chatInput.value = '';

                // Generate and add assistant response after a short delay
                setTimeout(() => {
                    const response = generateResponse(message);
                    addMessage(response, false);
                }, 800);
            }

            // Verification handling
            function setupVerification() {
                // Handle input focus and auto-advance
                otpInputs.forEach((input, index) => {
                    input.addEventListener('input', function(e) {
                        // Allow only numbers
                        this.value = this.value.replace(/[^0-9]/g, '');

                        // Auto advance to next input
                        if (this.value.length === 1 && index < otpInputs.length - 1) {
                            otpInputs[index + 1].focus();
                        }
                    });

                    // Handle backspace
                    input.addEventListener('keydown', function(e) {
                        if (e.key === 'Backspace' && !this.value && index > 0) {
                            otpInputs[index - 1].focus();
                        }
                    });
                });

                // Handle paste event for OTP
                document.querySelector('.otp-container').addEventListener('paste', function(e) {
                    e.preventDefault();
                    const pastedData = e.clipboardData.getData('text');
                    
                    if (/^\d+$/.test(pastedData)) {
                        const digits = pastedData.slice(0, 6).split('');
                        
                        otpInputs.forEach((input, index) => {
                            if (index < digits.length) {
                                input.value = digits[index];
                            }
                        });
                        
                        // Focus the appropriate input
                        if (digits.length < 6) {
                            otpInputs[Math.min(digits.length, 5)].focus();
                        }
                    }
                });

                // Clear verification UI state
                function resetVerificationUI() {
                    otpInputs.forEach(input => {
                        input.value = '';
                        input.style.borderColor = '';
                    });
                    verificationMessage.classList.add('hidden');
                    verificationMessage.textContent = '';
                    verificationMessage.classList.remove('success-message', 'error-message');
                }

                // Get OTP code from inputs
                function getOtpCode() {
                    return Array.from(otpInputs).map(input => input.value).join('');
                }

                // Verify OTP - mock implementation
                function verifyOtp(code) {
                    // For demo purposes, any 6-digit code is valid
                    return code.length === 6;
                }

                // Verification button click
                verifyButton.addEventListener('click', function() {
                    const otpCode = getOtpCode();

                    if (verifyOtp(otpCode)) {
                        // Success
                        verificationMessage.textContent = 'Verification successful!';
                        verificationMessage.classList.remove('error-message', 'hidden');
                        verificationMessage.classList.add('success-message');

                        otpInputs.forEach(input => {
                            input.style.borderColor = '#10b981';
                        });

                        // Mark as verified
                        isVerified = true;
                        localStorage.setItem('university_assistant_verified', 'true');

                        // Update welcome message and username
                        updateWelcomeMessage();
                        if (isAuthenticated && userName) {
                            userName.textContent = currentUser.name + ' (Verified)';
                        }

                        // Close modal after a short delay
                        setTimeout(() => {
                            verificationModal.classList.add('hidden');
                            resetVerificationUI();
                        }, 1500);
                    } else {
                        // Failed
                        verificationMessage.textContent = 'Please enter a valid 6-digit code.';
                        verificationMessage.classList.remove('success-message', 'hidden');
                        verificationMessage.classList.add('error-message');

                        otpInputs.forEach(input => {
                            if (!input.value) {
                                input.style.borderColor = '#ef4444';
                            }
                        });
                    }
                });

                // Resend code
                resendCodeBtn.addEventListener('click', function() {
                    verificationMessage.textContent = 'A new verification code has been sent to your email.';
                    verificationMessage.classList.remove('error-message', 'hidden');
                    verificationMessage.classList.add('success-message');
                    
                    setTimeout(() => {
                        verificationMessage.classList.add('hidden');
                    }, 3000);
                });

                // Close verification modal
                closeVerification.addEventListener('click', function() {
                    verificationModal.classList.add('hidden');
                    resetVerificationUI();
                });
            }

            // Event Listeners
            chatButton.addEventListener('click', toggleChatWindow);
            closeChat.addEventListener('click', toggleChatWindow);
            loginForm.addEventListener('submit', handleLogin);
            logoutButton.addEventListener('click', handleLogout);

            sendMessage.addEventListener('click', sendUserMessage);

            chatInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    sendUserMessage();
                }
            });

            // Tab switching
            navItems.forEach(item => {
                item.addEventListener('click', () => {
                    // Update active tab styling
                    navItems.forEach(tab => tab.classList.remove('active'));
                    item.classList.add('active');

                    // Update current tab
                    currentTab = item.dataset.tab;

                    // Load appropriate quick actions
                    loadQuickActions(currentTab);
                });
            });

            // Open assistant button
            openAssistantBtn.addEventListener('click', function() {
                if (isAuthenticated) {
                    chatButtonContainer.classList.add('hidden');
                    chatWindow.classList.remove('hidden');
                    showChatView();
                } else {
                    chatButtonContainer.classList.add('hidden');
                    chatWindow.classList.remove('hidden');
                    showLoginView();
                }
            });

            // Verification button
            verificationBtn.addEventListener('click', function() {
                if (!isAuthenticated) {
                    // Need to login first
                    chatButtonContainer.classList.add('hidden');
                    chatWindow.classList.remove('hidden');
                    showLoginView();
                    
                    showError("Please log in before verifying your account");
                } else if (isVerified) {
                    alert('Your account is already verified!');
                } else {
                    verificationModal.classList.remove('hidden');
                    otpInputs[0].focus();
                }
            });

            // Initialize
            checkAuth();
            setupVerification();
            
            // Fix for scrolling issues
            chatMessages.addEventListener('DOMNodeInserted', function() {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            });
        });
    </script>
</body>
</html>